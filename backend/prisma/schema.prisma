// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String
  createdAt    DateTime  @default(now())
  sessions     Session[]
}

model Session {
  id                    String      @id @default(uuid())
  userId               String
  jobTitle             String
  department           String
  location             String
  employmentType       String      // Full-time, Part-time, Contract, etc.
  experienceLevel      String      // Junior, Mid, Senior
  jobDescription       String      // Main job description
  requiredSkills       String[]    // Array of required skills
  preferredSkills      String[]    // Array of preferred skills
  educationRequired    String      // Minimum education requirement
  educationPreferred   String?     // Preferred education level
  responsibilities     String[]    // Array of key responsibilities
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  user                User        @relation(fields: [userId], references: [id])
  candidates          Candidate[]
}

model Candidate {
  id          String   @id @default(uuid())
  sessionId   String
  session     Session  @relation(fields: [sessionId], references: [id])
  resumes     Resume[]

  @@index([sessionId])
}

model Resume {
  id           String    @id @default(uuid())
  candidateId  String
  filePath     String
  extractedText String?
  structuredData Json?
  status       String    @default("processed")
  createdAt    DateTime  @default(now())
  candidate    Candidate @relation(fields: [candidateId], references: [id])
  evaluation   Evaluation?

  @@index([candidateId])
}

model Evaluation {
  id           String   @id @default(uuid())
  resumeId     String   @unique
  resume       Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  keywordScore Float
  qualitativeScore Float
  totalScore   Float
  createdAt    DateTime @default(now())
} 